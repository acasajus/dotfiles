set nocompatible     " Disable vi-compatibility
set laststatus=2     " Always show the statusline
set encoding=utf-8   " Show unicode glyphs
set number           " Show line numbers
set esckeys          " Allow cursor keys in insert mode
set ttyfast          " Optimize for fast terminal connections
set gdefault         " Add the g flag to search/replace by default
set binary           " Don't add empty newlines at end of files
set noeol            " Don't add empty newlines at end of files
set background=dark  " Dark bg
set tabstop=2        " Make tabs as wide as two spaces
set hlsearch         " Highlight searches
set incsearch        " Highlight dynamically as pattern is typed
set laststatus=2     " Always show status line
set mouse=a          " Enable mouse in all modes
set noerrorbells     " Disable error bells
set nostartofline    " Don’t reset cursor to start of line when moving around.
set ruler            " Show the cursor position
set shortmess=atI    " Don’t show the intro message when starting vim
set showmode         " Show the current mode
set title            " Show the filename in the window titlebar
set showcmd          " Show the (partial) command as it’s being typed
syntax on            " Enable syntax highlighting
let mapleader=","    " Change the mapleader
set textwidth=140    " Max textwidth
set backspace=2      " Set backspace work like in most other apps 


" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set nolist

" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
set viminfo='10,\"100,:20,%,n~/.viminfo
if exists("&undodir")
	set undodir=~/.vim/undo
endif

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>
autocmd BufWritePre *.py call StripWhitespace()

" Better buffer management
map <silent> <leader>b :buffers<CR>:buffer<Space>

" Vundle!
source ~/.vim/bundles.vim

nmap <silent> <F1> :buffers<CR>:buffer<Space>
" Bind F2 to show "invisible" chars
nmap <silent> <F2> :set invlist<CR>:set list?<CR>
" Bind F3 to show line numbers
nmap <silent> <F3> :set invnumber<CR>:set number?<CR>
" Bind F4 to toggle Paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>
" Bind F5 to GUndo
noremap <F5> :GundoToggle<CR>
" Make a dos2unix
noremap <F6> :update<CR>:e ++ff=dos<CR>:setlocal ff=unix<CR>
" Bind F8 to TagbarToggle
noremap <F8> :TagbarToggle<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" select previously yanked line
nnoremap <leader>v V`]

" Map the arrow keys to be based on display lines, not physical lines
map <Down> gj
map <Up> gk

" Toggle hlsearch with <leader>hs
nmap <leader>hs :set hlsearch! hlsearch?<CR>

" Adjust viewports to the same size
map <Leader>= <C-w>=

" Spell Check
let b:myLang=0
let g:myLangList=["nospell","en_us", "es_es"]
function! ToggleSpell()
  let b:myLang=b:myLang+1
  if b:myLang>=len(g:myLangList) | let b:myLang=0 | endif
  if b:myLang==0
    setlocal nospell
  else
    execute "setlocal spell spelllang=".get(g:myLangList, b:myLang)
  endif
  echo "spell checking language:" g:myLangList[b:myLang]
endfunction
nmap <leader>s :call ToggleSpell()<CR>

" use :w!! to write to a file using sudo if you forgot to 'sudo vim file'
" (it will prompt for sudo password when writing)
cmap w!! %!sudo tee > /dev/null %

" Set CrtlP ignores
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\.git$\|\.hg$\|\.svn$',
	\ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
	\ }
let g:ctrlp_map = '<c-f>'
let g:ctrlp_extensions = ['cmdline', 'yankring']

"Supertab magic
let g:SuperTabDefaultCompletionType = "context"
set completeopt=menu

" Unicode powerline
let g:Powerline_symbols="unicode"
 
" Remember previous position
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"Set the badwolf colorsheme
colorscheme badwolf

" Github install 
let $GIT_SSL_NO_VERIFY = 'true'

" Latexbox config
let g:LatexBox_latexmk_options = '-pvc'
let g:LatexBox_autojump = 1

" Darwincrap
let os=system("uname")
if os=="Darwin"
  let g:LatexBox_viewer = '/Applications/Preview.app/Contents/MacOS/Preview'
endif
